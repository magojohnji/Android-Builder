name: Compile kernels

on:
  push:
    paths-ignore:
      - 'website/**'
  pull_request: 
  repository_dispatch:
  workflow_dispatch:  
  # schedule:
  #   - cron: "14 13 * * 5"

jobs:
  Read-configuration:
    name: üêÇ Parse configs
    runs-on: ubuntu-latest
    outputs:
      CONFIGS: ${{ steps.generate-matrix.outputs.CONFIGS }}
      BUILD_DATE: ${{ steps.generate-builddate.outputs.BUILDDATE }}
    steps:
      # This action checks-out your CONFIGSitory under $GITHUB_WORKSPACE, so your workflow can access it.
      - name: üòÑ Checkout
        uses: actions/checkout@v4

      # Match the configuration files in the CONFIGS directory, read the contents and merge them into an array.
      - name: üòÜ Generate Matrix
        id: generate-matrix
        run: |
          echo "CONFIGS<<EOF" >> $GITHUB_OUTPUT
          jq -s '[.[][]]' Kernel/configs/violet_ancient.config.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Set compile time.
      - name: ‚è∞ Set builddate
        id: generate-builddate
        run: echo "BUILDDATE=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT


  Compile-Kernel:
    name: üêé Compile the kernel
    runs-on: ubuntu-latest
    needs:
      - Read-configuration
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        CONFIG: ${{ fromJSON(needs.Read-configuration.outputs.CONFIGS) }}
    env:
      # Basic configuration
      WORKSPACE: ${{ github.workspace }}
      BUILD_DATE: "${{ needs.Read-configuration.outputs.BUILD_DATE }}"

      # General configuration
      KERNEL_NAME: ${{ matrix.CONFIG.general.name }}
      BUILD_HOST: ${{ matrix.CONFIG.general.build-host }}
      BUILD_USER: ${{ matrix.CONFIG.general.builder-name }}
      ENABLE_KPROBES: ${{ matrix.CONFIG.general.enableKprobes }}
      ENABLE_OVERLAY_FS: ${{ matrix.CONFIG.general.enableOverlayFS }}
      DISABLE_LTO: ${{ matrix.CONFIG.general.disable-lto }}
      DISABLE_CC_WERROR: ${{ matrix.CONFIG.general.disable-cc-werror }}
      RELEASE: ${{ matrix.CONFIG.general.release }}
      REMOVE_UNUSED_PACKAGES: ${{ matrix.CONFIG.general.remove-unused-packages }}

      # Kernel source configuration
      KERNEL_LINK: ${{ matrix.CONFIG.kernel.basic.link }}
      KERNEL_BRANCH: ${{ matrix.CONFIG.kernel.basic.branch }}
      KERNEL_DEFCONFIG_PATH: ${{ matrix.CONFIG.kernel.basic.defconfig }}
      KERNEL_ARCH: ${{ matrix.CONFIG.kernel.basic.arch }}
      KERNEL_IMAGE_NAME: ${{ matrix.CONFIG.kernel.basic.image }}
      NEED_DTBO: ${{ matrix.CONFIG.kernel.basic.need-dtbo }}

      # KernelSU configuration
      ENABLE_KERNELSU: ${{ matrix.CONFIG.withKernelSU.enable }}
      KERNELSU_INSTALLER_LINK: ${{ matrix.CONFIG.withKernelSU.installer }}
      KERNELSU_TAG_NAME: ${{ matrix.CONFIG.withKernelSU.tag }}
      APPLY_KERNELSU_PATCH: ${{ matrix.CONFIG.withKernelSU.apply-patch }}
      KERNELSU_MANAGER_SIGNATURE_EXPECTED_SIZE: ${{ matrix.CONFIG.withKernelSU.ksu_expected_size }}
      KERNELSU_MANAGER_SIGNATURE_EXPECTED_HASH: ${{ matrix.CONFIG.withKernelSU.ksu_expected_hash }}
      WHETEHR_MAKE_BOOT: ${{ matrix.CONFIG.withKernelSU.make_bootimg }}
      BOOTIMG_LINK: ${{ matrix.CONFIG.withKernelSU.bootimg_link }}

      # Whether to enable LXC docker
      ENABLE_LXC: ${{ matrix.CONFIG.enableLXC }}

      # Whether to use ccache to speed up compilation
      ENABLE_CCACHE: ${{ matrix.CONFIG.ccache }}

      # AnyKernel3 configuration
      ENABLE_ANYKERNEL3: ${{ matrix.CONFIG.AnyKernel3.enable }}
      ANYKERNEL3_LINK: ${{ matrix.CONFIG.AnyKernel3.link }}
      ANYKERNEL3_BRANCH: ${{ matrix.CONFIG.AnyKernel3.branch }}

      # Set output & ccache directory
      OUT_DIR: "$GITHUB_WORKSPACE/kernel_workspace/kernel_dir/out"
      CCACHE_DIR: "${{ github.workspace }}/ccache"
    steps:
      # Remove unused packages
      - name: Remove unused packages
        if: env.REMOVE_UNUSED_PACKAGES == 'true'
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: ture
          android: false
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: false

      # Set swap space
      - name: Set swap to 10G
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10

      # This action checks-out your CONFIGSitory under $GITHUB_WORKSPACE, so your workflow can access it.
      - name: Checkout
        uses: actions/checkout@v4

      # Install prerequisites for Ubuntu
      - name: Install prerequisites
        run: |
          mkdir -p $GITHUB_WORKSPACE/kernel_workspace/tools
          sudo apt update
          sudo apt upgrade
          sudo apt install -y curl git ftp lftp wget aria2 libarchive-tools ccache
          sudo apt install -y pngcrush schedtool dpkg-dev liblz4-tool make optipng maven device-tree-compiler 
          sudo apt install -y libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc
          sudo apt install -y libxml2-utils libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools lzop flex tree
          sudo apt install -y build-essential bc gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev libfl-dev
          sudo apt install -y pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl 
          sudo apt install -y llvm g++-multilib bison gperf zlib1g-dev automake
          sudo apt install -y tar bzip2 gzip unzip p7zip-full lzip lzma rar unrar cabextract lhasa arj nomarch zpaq brotli sharutils unace xz-utils unalz 
          mv $GITHUB_WORKSPACE/Scripts/Extract.sh $GITHUB_WORKSPACE/kernel_workspace/tools/Extract.sh

      - name: Set up Python 3
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      # Set device name.
      - name: Set device name
        run: echo "DEVICE=$(echo ${{ env.KERNEL_DEFCONFIG_PATH }} | sed 's!vendor/!!;s/_defconfig//;s/_user//;s/-perf//')" >> $GITHUB_ENV

      - name: Clone kernel source => (${{ env.KERNEL_LINK }})
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace

          if [[ ${{ env.KERNEL_LINK }} =~ git ]]; then
            git clone --recurse-submodules --depth=1 -j $(nproc) --branch ${{ env.KERNEL_BRANCH }} ${{ env.KERNEL_LINK }} kernel_dir
          else
            mkdir kernel_dir
            cd kernel_dir
            aria2c ${{ env.KERNEL_LINK }}
            kernel_file_name=$(ls)

            $GITHUB_WORKSPACE/kernel_workspace/tools/Extract.sh $kernel_file_name
            rm -rf $kernel_file_name
          fi
          # tree kernel_dir

      - name: Apply kernel patches (except KernelSU-hook.patch)
        env:
          patches: "${{ toJSON(matrix.CONFIG.kernel.patches) }}"
        if: ${{ toJSON(matrix.CONFIG.kernel.patches) != '{}' }}
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/kernel_dir

          patches_num=$(echo "$patches" | jq 'length')
          echo "There is $patches_num defined toolchains."

          # for patch in $(echo "$patches" | jq -r 'keys[]'); do
          #  patch_path=$(echo "$patches" | jq -r ".$patch.path")

            git apply legacy-hook.patch

            echo "Apply $patch => ($patch_path)"
          # done

      # Initialize ccache
      - name: Setup ccache
        if: ${{ env.ENABLE_CCACHE == 'true' }}
        id: hash
        run: |
          # Create output directory
          mkdir -p ${{ env.OUT_DIR }}

          # Initialize ccache
          ccache -o compression=false -o cache_dir=${{ env.CCACHE_DIR }}

          # Generate configuration's hash
          echo $(echo -n '${{ toJSON(matrix.config) }}' | openssl dgst -sha1 | awk '{print $2}')
          HASH_FULL=$(echo -n '${{ toJSON(matrix.config) }}' | openssl dgst -sha1 | awk '{print $2}')
          echo ${HASH_FULL:0:8}
          HASH=${HASH_FULL:0:8}
          echo "HASH=${HASH_FULL:0:8}" >> $GITHUB_OUTPUT

      - name: Cache ccache & output
        env:
          HASH: ${{ steps.hash.outputs.HASH }}
        if: ${{ env.ENABLE_CCACHE == 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.OUT_DIR }}
            ${{ env.CCACHE_DIR }}
          key: cache-${{ env.KERNEL_NAME }}-${{env.HASH}}-${{ env.BUILD_DATE }}
          restore-keys: |
            cache-${{ env.KERNEL_NAME }}-${{env.HASH}}-${{ env.BUILD_DATE }}
            cache-${{ env.KERNEL_NAME }}-${{env.HASH}}-
            cache-${{ env.KERNEL_NAME }}-

      - name: Get toolchains
        env:
          toolchains: "${{ toJSON(matrix.CONFIG.toolchains) }}"
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/kernel_dir
          mkdir toolchains
          cd toolchains
          toolchains_num="$(echo $toolchains | jq 'length')"
          echo "There is $toolchains_num defined toolchains."

          for ((i=0;i<toolchains_num;i++)); do
            toolchain=$(echo $toolchains | jq -r ".[$i]")

            toolchain_name=$(echo $toolchain | jq -r ".name")
            
            # From archive
            if echo $toolchain | jq -e 'has("url")' > /dev/null; then
              # If from archive
              toolchain_url=$(echo $toolchain | jq -r ".url")
              mkdir -p $toolchain_name
              cd $toolchain_name

              # Download archive
              aria2c "$toolchain_url"

              # Get filename
              filename="${toolchain_url##*/}"

              $GITHUB_WORKSPACE/kernel_workspace/tools/Extract.sh $filename

              # Delete file to avoid duplicate name conflicts 
              rm $filename

              echo "Download $toolchain_name => ($toolchain_url)"
            else
              # If from git
              toolchain_repo=$(echo $toolchain | jq -r ".repo")
              toolchain_branch=$(echo $toolchain | jq -r ".branch")
              git clone --recursive --depth=1 -j $(nproc) --branch $toolchain_branch $toolchain_repo $toolchain_name

              echo "Clone $toolchain_name => ($toolchain_repo)"
            fi

            jq -r ".binaryEnv[] | tostring" <<< "$toolchain" | while read -r subPath; do
              echo "$GITHUB_WORKSPACE/kernel_workspace/kernel_dir/toolchains/$toolchain_name/$subPath/" >> $GITHUB_PATH
            done
          done

      - name: Download magiskboot for linux
        if: env.WHETEHR_MAKE_BOOT == 'true'
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          git clone --recurse-submodules https://github.com/magojohnji/magiskboot-linux.git magiskboot
          cd magiskboot
          cp ./x86_64/magiskboot ../tools/
          cd ..
          rm -rf magiskboot

      - name: Download source boot image
        if: env.WHETEHR_MAKE_BOOT == 'true'
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          mkdir bootimg_tmp
          aria2c -o ./bootimg_tmp/boot-source-kernelsu.img ${{ env.BOOTIMG_LINK }}
          if [ -f ./bootimg_tmp/boot-source-kernelsu.img ]; then
            echo "SOURCE_KERNELSU_BOOTIMG_PATH=$GITHUB_WORKSPACE/kernel_workspace/bootimg_tmp/boot-source-kernelsu.img" >> $GITHUB_ENV
          fi

      - name: Set build args
        id: generate-args
        env:
          PARAMS: "${{ toJSON(matrix.CONFIG.params) }}"
          THREAD: $(nproc --all)
        run: |
          echo "PATH Variable: $PATH"

          ARCH=${{ env.KERNEL_ARCH }}
          CC=$(echo $PARAMS | jq -r ".CC")

          args="-j${{ env.THREAD }} O=out ARCH=$ARCH"
          if [ -n "$CC" ]; then

            if [[ "$CC" == *"/"* ]]; then
              CC=${{ env.WORKSPACE }}/$CC
            fi

            if [ ${{ env.ENABLE_CCACHE }} = true ]; then
              args="$args CC=\"ccache $CC\""
            else
              args="$args CC=$CC"
            fi
          fi
          while read -r externalCommand; do
            key=$(echo "$externalCommand" | cut -d= -f1)
            value=$(echo "$externalCommand" | cut -d= -f2)
            if [[ "$value" == *"/"* ]]; then
              value="${{ env.WORKSPACE }}/$value"
            fi
            args="$args $key=$value"
          done < <(jq -r '.externalCommands | to_entries[] | "\(.key)=\(.value)"' <<< "$PARAMS")

          echo "ARCH=$ARCH" >> $GITHUB_OUTPUT
          echo "ARGS=$args" >> $GITHUB_OUTPUT

          echo "$args"

      - name: Setup KernelSU
        env:
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
        if: ${{ env.ENABLE_KERNELSU == 'true' }}
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/kernel_dir
          # Delete old KernelSU
          if [ -d "./KernelSU" ]; then
            rm -rf "./KernelSU"
          fi
          if [ -d "./drivers/kernelsu" ]; then
            rm -rf "./drivers/kernelsu"
          fi

          if [ ${{ env.KERNELSU_TAG_NAME }} = '' ]; then
            curl -LSs "${{ env.KERNELSU_INSTALLER_LINK }}" | bash -
          else
            curl -LSs "${{ env.KERNELSU_INSTALLER_LINK }}" | bash -s ${{ env.KERNELSU_TAG_NAME }}
          fi

          if grep -q "CONFIG_KSU" arch/${{ env.KERNEL_ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}; then
            sed -i 's/# CONFIG_KSU is not set/CONFIG_KSU=y/g' arch/${{ env.KERNEL_ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
            sed -i 's/CONFIG_KSU=n/CONFIG_KSU=y/g' arch/${{ env.KERNEL_ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          else
              echo "CONFIG_KSU=y" >> arch/${{ env.KERNEL_ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          fi

          if [ ${{ env.ENABLE_KPROBES }} = true -a ${{ env.APPLY_KERNELSU_PATCH }} != true ]; then
              echo "CONFIG_MODULES=y" >> arch/${{ env.KERNEL_ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
              echo "CONFIG_KPROBES=y" >> arch/${{ env.KERNEL_ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
              echo "CONFIG_HAVE_KPROBES=y" >> arch/${{ env.KERNEL_ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
              echo "CONFIG_KPROBE_EVENTS=y" >> arch/${{ env.KERNEL_ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          fi

          if [ ${{ env.ENABLE_OVERLAY_FS }} = true ]; then
              echo "CONFIG_OVERLAY_FS=y" >> arch/${{ env.KERNEL_ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          fi

          if [ ${{ env.DISABLE_LTO }} = true ]; then
              sed -i 's/CONFIG_LTO=y/CONFIG_LTO=n/' arch/${{ env.KERNEL_ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
              sed -i 's/CONFIG_LTO_CLANG=y/CONFIG_LTO_CLANG=n/' arch/${{ env.KERNEL_ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
              sed -i 's/CONFIG_THINLTO=y/CONFIG_THINLTO=n/' arch/${{ env.KERNEL_ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATHKERNEL_DEFCONFIG_PATH }}
              echo "CONFIG_LTO_NONE=y" >> arch/${{ env.KERNEL_ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          fi

          if [ ${{ env.DISABLE_CC_WERROR }} = true ]; then
              echo "CONFIG_CC_WERROR=n" >> arch/${{ env.KERNEL_ARCH }}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          fi
  
      - name: Apply KernelSU patch
        if: ${{ env.APPLY_KERNELSU_PATCH == 'true' }}
        run: |
            cd $GITHUB_WORKSPACE/kernel_workspace/kernel_dir
            git apply KernelSU-hook.patch
            echo "KernelSU-hook.patch applied successfully"

      - name: Setup LXC docker
        env:
          DEFCONFIG: ${{ env.WORKSPACE }}/${{ env.KERNEL_NAME }}/arch/${{ steps.generate-args.outputs.ARCH }}/configs/${{env.KERNEL_DEFCONFIG_PATH}}
          ADD_DEFCONFIG: ${{ env.WORKSPACE }}/Kernel/LXC/LXC_defconfig
        if: ${{ env.ENABLE_LXC == 'true' }}
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/kernel_dir
          # Add configuration
          for config in $(cat ${{ env.ADD_DEFCONFIG }})
          do
            echo $i >> ${{ env.DEFCONFIG }}
          done

          # Apply patch
          if [ -f kernel/cgroup.c ]; then
            row=$(sed -n -e '/^static int cgroup_add_file/=' kernel/cgroup.c)
            touch /tmp/tmp.txt
            sed -n -e '/static int cgroup_add_file/,/return 0/p' kernel/cgroup.c >> /tmp/tmp.txt
            row2=$(sed -n -e '/return 0/=' /tmp/tmp.txt)
            row3=$(echo `expr $row + $row2 - 1`)
            sed -i "$row3 i\        }" kernel/cgroup.c
            sed -i "$row3 i\                kernfs_create_link(cgrp->kn, name, kn);" kernel/cgroup.c
            sed -i "$row3 i\                snprintf(name, CGROUP_FILE_NAME_MAX, \"%s.%s\", cft->ss->name, cft->name);" kernel/cgroup.c
            sed -i "$row3 i\        if (cft->ss && (cgrp->root->flags & CGRP_ROOT_NOPREFIX) && !(cft->flags & CFTYPE_NO_PREFIX)) {" kernel/cgroup.c
            echo "Modify kernel/cgroup.c"
          fi
          if [ -f kernel/cgroup/cgroup.c ]; then
            row=$(sed -n -e '/^static int cgroup_add_file/=' kernel/cgroup/cgroup.c)
            touch /tmp/tmp.txt
            sed -n -e '/static int cgroup_add_file/,/return 0/p' kernel/cgroup/cgroup.c >> /tmp/tmp.txt
            row2=$(sed -n -e '/return 0/=' /tmp/tmp.txt)
            row3=$(echo `expr $row + $row2 - 1`)
            sed -i "$row3 i\        }" kernel/cgroup/cgroup.c
            sed -i "$row3 i\                kernfs_create_link(cgrp->kn, name, kn);" kernel/cgroup/cgroup.c
            sed -i "$row3 i\                snprintf(name, CGROUP_FILE_NAME_MAX, \"%s.%s\", cft->ss->name, cft->name);" kernel/cgroup/cgroup.c
            sed -i "$row3 i\        if (cft->ss && (cgrp->root->flags & CGRP_ROOT_NOPREFIX) && !(cft->flags & CFTYPE_NO_PREFIX)) {" kernel/cgroup/cgroup.c
            echo "Modify kernel/cgroup/cgroup.c"
          fi
          if [ -f android-kernel/net/netfilter/xt_qtaguid.c ]; then
            git am -s < ${{ env.WORKSPACE }}/LXC/Patches/xt_qtaguid.patch
            echo "Apply xt_qtaguid.patch"
          fi

      - name: Start building the kernel
        env:
          ARGS: ${{ steps.generate-args.outputs.ARGS }}
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/kernel_dir
          echo "PATH Variable: $PATH"
          if [ ! -z ${{ env.KERNELSU_MANAGER_SIGNATURE_EXPECTED_SIZE }} ] && [ ! -z ${{ env.KERNELSU_MANAGER_SIGNATURE_EXPECTED_HASH }} ]; then
            export KSU_EXPECTED_SIZE=${{ env.KERNELSU_MANAGER_SIGNATURE_EXPECTED_SIZE }}
            export KSU_EXPECTED_HASH=${{ env.KERNELSU_MANAGER_SIGNATURE_EXPECTED_HASH }}
          fi

          export KBUILD_BUILD_HOST=${{ env.BUILD_HOST }}
          if [ ${{ env.BUILD_USER }} = "" ]; then
            export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)
          else
            export KBUILD_BUILD_USER=${{ env.BUILD_USER }}
          fi

          make ARCH=arm64 ${{ env.KERNEL_DEFCONFIG_PATH }} O=out CC=clang
          make ${{ env.ARGS }}
          
          tree ${{ env.OUT_DIR }}/arch/${{ env.KERNEL_ARCH }}/boot/

      - name: Pack Anykernel3
        if: ${{ env.ENABLE_ANYKERNEL3 == 'true' }}
        env:
          PARAMS: "${{ toJSON(matrix.CONFIG.AnyKernel3) }}"
          ARCH: ${{ steps.generate-args.outputs.KERNEL_ARCH }}
          ANYKERNEL3_FILE: "${{ env.WORKSPACE }}/AnyKernel3-${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}"
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/
          if [ '${{ env.ANYKERNEL3_LINK }}' = '' ]; then
            git clone --recursive --depth=1 -j $(nproc) https://github.com/osm0sis/AnyKernel3 AnyKernel3
            sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
            sed -i 's!block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!block=auto;!g' AnyKernel3/anykernel.sh
            sed -i 's/is_slot_device=0;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh
            echo "Use origin Anykernel3 => (https://github.com/osm0sis/AnyKernel3)"
          else
            git clone --recursive --depth=1 -j $(nproc) --branch ${{ env.ANYKERNEL3_BRANCH }} ${{ env.ANYKERNEL3_LINK }} AnyKernel3
            echo "Use custom AnyKernel3 => (${{ env.AK3_LINK }})"
          fi


          if [ -e "${{ env.OUT_DIR }}/arch/${{ env.KERNEL_ARCH }}/boot/Image.gz-dtb" ]; then
            cp -f ${{ env.OUT_DIR }}/arch/${{ env.KERNEL_ARCH }}/boot/Image.gz-dtb ./AnyKernel3/
          else
            if [ -e "${{ env.OUT_DIR }}/arch/${{ env.KERNEL_ARCH }}/boot/Image" ]; then
              cp -f ${{ env.OUT_DIR }}/arch/${{ env.KERNEL_ARCH }}/boot/Image ./AnyKernel3/
            fi
            if [ -e "${{ env.OUT_DIR }}/arch/${{ env.KERNEL_ARCH }}/boot/Image.gz" ]; then
              cp -f ${{ env.OUT_DIR }}/arch/${{ env.KERNEL_ARCH }}/boot/Image.gz ./AnyKernel3/
            fi
            if [ -e "${{ env.OUT_DIR }}/arch/${{ env.KERNEL_ARCH }}/boot/dtbo" ]; then
              cp -f ${{ env.OUT_DIR }}/arch/${{ env.KERNEL_ARCH }}/boot/dtbo ./AnyKernel3/
            fi
            if [ -e "${{ env.OUT_DIR }}/arch/${{ env.KERNEL_ARCH }}/boot/dtbo.img" ]; then
              cp -f ${{ env.OUT_DIR }}/arch/${{ env.KERNEL_ARCH }}/boot/dtbo.img ./AnyKernel3/
            fi
          fi

          cd ./AnyKernel3/
          zip -q -r "${{ env.ANYKERNEL3_FILE }}.zip" *

      - name: Setting up KernelSU boot image
        if: env.WHETEHR_MAKE_BOOT == 'true'
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          chmod +x ./tools/magiskboot
          cd bootimg_tmp
          mkdir source kernelbuild
          cd source
          $GITHUB_WORKSPACE/kernel_workspace/tools/magiskboot unpack ${{env.SOURCE_KERNELSU_BOOTIMG_PATH}}
          cd ..
          cp -r ./source ./new
          if [ ${{ env.KERNEL_IMAGE_NAME }} = Image.gz-dtb ]; then
            cd $GITHUB_WORKSPACE/kernel_workspace/bootimg_tmp/kernelbuild
            $GITHUB_WORKSPACE/kernel_workspace/tools/magiskboot split ${{ env.OUT_DIR }}/arch/${{ env.KERNEL_ARCH }}/boot/Image.gz-dtb
            cp -rf kernel $GITHUB_WORKSPACE/kernel_workspace/bootimg_tmp/new/
            cp -rf kernel_dtb $GITHUB_WORKSPACE/kernel_workspace/bootimg_tmp/new/
            cd $GITHUB_WORKSPACE/kernel_workspace/bootimg_tmp/new/
            $GITHUB_WORKSPACE/kernel_workspace/tools/magiskboot repack ${{env.SOURCE_KERNELSU_BOOTIMG_PATH}} $GITHUB_WORKSPACE/kernel_workspace/bootimg_tmp/boot-kernelsu.img
          else
            cd $GITHUB_WORKSPACE/kernel_workspace/bootimg_tmp/new/
            cp -rf ${{ env.OUT_DIR }}/arch/${{ env.KERNEL_ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }} ./kernel
            $GITHUB_WORKSPACE/kernel_workspace/tools/magiskboot repack ${{env.SOURCE_KERNELSU_BOOTIMG_PATH}} $GITHUB_WORKSPACE/kernel_workspace/bootimg_tmp/boot-kernelsu.img
          fi
      
      - name: Test
        run: |
          tree ${{ env.OUT_DIR }}/arch/${{ env.KERNEL_ARCH }}/boot/
      
      - name: Upload kernel image
        uses: actions/upload-artifact@v4
        env:
          ARCH: ${{ steps.generate-args.outputs.KERNEL_ARCH }}
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-${{ env.KERNEL_IMAGE_NAME }}
          path: ${{ github.workspace }}/kernel_workspace/kernel_dir/out/arch/arm64/boot/${{ env.KERNEL_IMAGE_NAME }}
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload dtbo.img
        uses: actions/upload-artifact@v4
        env:
          ARCH: ${{ steps.generate-args.outputs.KERNEL_ARCH }}
        if: ${{ env.NEED_DTBO == 'true' }}
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-dtbo.img
          path: ${{ github.workspace }}/kernel_workspace/kernel_dir/out/arch/${{ env.KERNEL_ARCH }}/boot/dtbo.img
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload AnyKernel3 image => (${{ env.BUILD_DATE }})
        env:
          ANYKERNEL3_FILE: "AnyKernel3-${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}"
        uses: actions/upload-artifact@v4
        if: ${{ env.ENABLE_ANYKERNEL3 == 'true' }}
        with:
          name: "${{ env.ANYKERNEL3_FILE }}"
          path: ${{ github.workspace }}/kernel_workspace/AnyKernel3/${{ env.ANYKERNEL3_FILE }}.zip

      - name: Upload boot image => (${{ env.BUILD_DATE }})
        env:
          BOOTIMG_FILE: "Boot-${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}"
        uses: actions/upload-artifact@v4
        if: ${{ env.WHETEHR_MAKE_BOOT == 'true' }}
        with:
          name: "${{ env.BOOTIMG_FILE }}"
          path: ${{ github.workspace }}/kernel_workspace/bootimg_tmp/boot-kernelsu.img

      - name: Create GitHub Release => (${{ env.BUILD_DATE }})
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v1
        if: ${{ env.RELEASE == 'true' }}
        with:
          tag_name: Build-${{ env.DEVICE }}-${{ env.BUILD_DATE }}.${{ github.run_number }}
          files: |
            ${{ env.OUT_DIR }}/arch/${{ env.KERNEL_ARCH }}/boot/Image
            ${{ env.OUT_DIR }}/arch/${{ env.KERNEL_ARCH }}/boot/Image.gz
            ${{ env.OUT_DIR }}/arch/${{ env.KERNEL_ARCH }}/boot/Image.gz-dtb
            ${{ env.OUT_DIR }}/arch/${{ env.KERNEL_ARCH }}/boot/dtb
            ${{ env.OUT_DIR }}/arch/${{ env.KERNEL_ARCH }}/boot/dtbo.img
            $GITHUB_WORKSPACE/kernel_workspace/AnyKernel3/${{ env.ANYKERNEL3_FILE }}.zip
            $GITHUB_WORKSPACE/kernel_workspace/bootimg_tmp/boot-kernelsu.img
          generate_release_notes: true
      
      - name: Add job summary
        run: |
          echo '### RESULTS' >> $GITHUB_STEP_SUMMARY
          echo 'SUCCESS' >> $GITHUB_STEP_SUMMARY
          echo 'FAILED' >> $GITHUB_STEP_SUMMARY

          if [ ${{ env.ENABLE_KERNELSU }} = 'true' ]; then
            echo '- TYPE: KernelSU ' >> $GITHUB_STEP_SUMMARY
          fi
